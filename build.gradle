buildscript {
    repositories {
        jcenter()
    }

    dependencies {
  //      classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:2.2.+'
    }
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'maven-publish'

//apply plugin: 'provided-base'

repositories {
    jcenter()
}

dependencies {
    compile files(System.properties['java.home'] + "/../lib/tools.jar")

    compile gradleApi()
    compile localGroovy()
/*
    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'org.slf4j:slf4j-simple:1.7.12'

    compile 'com.google.guava:guava:18.0'
*/
    def jacksonVersion = '2.6.1'
    compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
//    compile "com.fasterxml.jackson.module:jackson-module-parameter-names:${jacksonVersion}"
  //  compile "com.fasterxml.jackson.dataformat:jackson-dataformat-smile:${jacksonVersion}"
  //  compile "com.fasterxml.jackson.datatype:jackson-datatype-guava:${jacksonVersion}"

    testCompile 'junit:junit:4.12'
}


group = "com.github.dnault.therapi"
version = "0.1.0-SNAPSHOT"

sourceCompatibility = 1.7
targetCompatibility = 1.7

task sourceJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier 'sources'
            }

            artifact javadocJar {
                classifier 'javadoc'
            }
        }
    }
}

task install {
    dependsOn(publishToMavenLocal)
}

task testDoclet {
    dependsOn test
}

task runtimeJavadoc(type: Javadoc) {
    dependsOn(jar)
    source = sourceSets.test.allJava
    title=""
    destinationDir = project.file("${project.buildDir}/runtime-javadoc");
    classpath = project.configurations.compile + project.configurations.testCompile  + project.files(project.sourceSets.main.output.classesDir) + project.files(project.sourceSets.test.output.classesDir)
    options.docletpath = classpath.asType(List)
    options.doclet = "com.github.dnault.therapi.runtimejavadoc.RuntimeJavadocDoclet"
}

task myJavadocs(type: Javadoc) {
    classpath = project.configurations.compile + project.files(project.sourceSets.main.output.classesDir)

    source = sourceSets.main.allJava
    failOnError=false
}
